pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Maven is building your code...'
                    writeFile file: 'build-log.txt', text: 'Build stage executed successfully.'
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo 'Running unit tests with JavaUnit...'
                    echo 'Running integration tests with Selenium...'
                    writeFile file: 'test-log.txt', text: 'Unit and integration tests completed.'
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    echo 'Analyzing code quality with SonarQube...'
                    writeFile file: 'code-analysis-log.txt', text: 'Code analysis completed successfully.'
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    echo 'Scanning for vulnerabilities with SAST scanner...'
                    writeFile file: 'security-scan-log.txt', text: 'Security scan completed successfully.'
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    echo 'Deploying application to staging server using AWS...'
                    writeFile file: 'deploy-staging-log.txt', text: 'Deployment to staging completed successfully.'
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo 'Running integration tests on staging environment...'
                    writeFile file: 'integration-staging-log.txt', text: 'Integration tests on staging passed.'
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    echo 'Deploying application to production server using AWS tools...'
                    writeFile file: 'deploy-production-log.txt', text: 'Deployment to production completed successfully.'
                }
            }
        }
    }
  
    post {
        always {
            archiveArtifacts artifacts: '*.txt', allowEmptyArchive: true
        }
        success {
            script {
                def logFiles = [
                    'build-log.txt',
                    'test-log.txt',
                    'code-analysis-log.txt',
                    'security-scan-log.txt',
                    'deploy-staging-log.txt',
                    'integration-staging-log.txt',
                    'deploy-production-log.txt'
                ]
                def attachmentPath = logFiles.join(',')
                emailext(
                    to: "disadimethasa@gmail.com",
                    subject: "Pipeline Success - Build # ${currentBuild.number}",
                    body: "The pipeline has successfully completed all stages. Build logs are attached.",
                    attachmentsPattern: attachmentPath
                )
            }
        }
        failure {
            script {
                def logFiles = [
                    'build-log.txt',
                    'test-log.txt',
                    'code-analysis-log.txt',
                    'security-scan-log.txt',
                    'deploy-staging-log.txt',
                    'integration-staging-log.txt',
                    'deploy-production-log.txt'
                ]
                def attachmentPath = logFiles.join(',')
                emailext(
                    to: "disadimethasa@gmail.com",
                    subject: "Pipeline Failure - Build # ${currentBuild.number}",
                    body: "The pipeline has failed at stage ${currentStage.name}. Build logs are attached.",
                    attachmentsPattern: attachmentPath
                )
            }
        }
    }
}
