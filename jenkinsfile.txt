pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                echo 'Stage 1: Build'
                echo 'Task: Build the code using a build automation tool to compile and package your code.'
                echo 'Tool: Maven (e.g., mvn clean install)'
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Stage 2: Unit and Integration Tests'
                echo 'Task: Run unit tests to ensure the code functions as expected and run integration tests to ensure the different components of the application work together as expected.'
                echo 'Tools: JUnit for unit tests (e.g., java -jar junit-platform-console-standalone.jar); Selenium for integration tests (e.g., selenium-server-standalone.jar)'
            }
        }
        stage('Code Analysis') {
            steps {
                echo 'Stage 3: Code Analysis'
                echo 'Task: Integrate a code analysis tool to analyze the code and ensure it meets industry standards.'
                echo 'Tool: SonarQube (e.g., sonar-scanner)'
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Stage 4: Security Scan'
                echo 'Task: Perform a security scan on the code using a tool to identify any vulnerabilities.'
                echo 'Tool: OWASP ZAP (e.g., zap-cli or OWASP ZAP Docker image)'
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Stage 5: Deploy to Staging'
                echo 'Task: Deploy the application to a staging server.'
                echo 'Tool: AWS EC2 instance (e.g., AWS CLI commands to deploy, e.g., aws ec2 deploy)'
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Stage 6: Integration Tests on Staging'
                echo 'Task: Run integration tests on the staging environment to ensure the application functions as expected in a production-like environment.'
                echo 'Tools: JUnit and Selenium (similar to unit and integration tests but targeted at the staging environment)'
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'Stage 7: Deploy to Production'
                echo 'Task: Deploy the application to a production server.'
                echo 'Tool: AWS EC2 instance (e.g., AWS CLI commands to deploy, e.g., aws ec2 deploy)'
            }
        }
    }
  
    post {
        always {
            script {
                try {
                    // Collect all log files
                    def logFiles = ['build-log.txt', 'test-log.txt', 'analysis-log.txt', 'scan-log.txt', 'deploy-log.txt']
                    logFiles.each { logFile ->
                        archiveArtifacts artifacts: logFile
                    }

                    // Send email notifications for the test and security scan stages
                    emailext(
                        to: 'disadimethasa@gmail.com',
                        subject: "Pipeline ${currentBuild.currentResult} - Build #${currentBuild.number}",
                        body: "The pipeline has completed with result: ${currentBuild.currentResult}. Please find the build logs attached.",
                        attachmentsPattern: logFiles.join(', ')
                    )
                } catch (Exception e) {
                    echo "Error occurred while trying to capture and email build logs: ${e.message}"
                }
            }
        }
    }
}
