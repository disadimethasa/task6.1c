pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Simulating Maven build...'
                    def buildLog = 'Build succeeded. Compiled and packaged the application successfully.'
                    writeFile file: 'build-log.txt', text: buildLog
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo 'running unit tests with JavaUnit...'
                    def testLog = 'Unit tests passed. Integration tests completed successfully.'
                    writeFile file: 'test-log.txt', text: testLog
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    echo 'Analyzing code quality with SonarQube...'
                    def analysisLog = 'Code analysis completed. No major issues found.'
                    writeFile file: 'analysis-log.txt', text: analysisLog
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    echo 'Scanning for vulnerabilities with SAST scanner..'
                    def scanLog = 'Security scan completed. No critical vulnerabilities detected.'
                    writeFile file: 'scan-log.txt', text: scanLog
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    echo 'Deploying application to staging server using AWS..'
                    def deployStagingLog = 'Deployment to staging environment completed successfully.'
                    writeFile file: 'deploy-staging-log.txt', text: deployStagingLog
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo 'Simulating integration tests on staging environment...'
                    def integrationStagingLog = 'Integration tests on staging passed.'
                    writeFile file: 'integration-staging-log.txt', text: integrationStagingLog
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    echo 'Simulating deployment to production...'
                    def deployProductionLog = 'Deployment to production completed successfully.'
                    writeFile file: 'deploy-production-log.txt', text: deployProductionLog
                }
            }
        }
    }
  
    post {
         emailext(
                to: "disadimethasa@gmail.com",
                subject: "Pipeline Success - Build # ${currentBuild.number}",
                body: "The pipeline has successfully completed all stages. Build logs are attached.",
                attachmentsPattern: 'build-log.txt,test-log.txt,analysis-log.txt,scan-log.txt,deploy-staging-log.txt,integration-staging-log.txt,deploy-production-log.txt'
            )
        //success {
          //  mail to: "disadimethasa@gmail.com",
            //     subject: "Pipeline Success - Build # ${currentBuild.number}",
              //   body: "The pipeline has successfully completed all stages. Build logs are attached."
        //}
        failure {
            mail to: "disadimethasa@gmail.com",
                 subject: "Pipeline Failure - Build # ${currentBuild.number}",
                 body: "The pipeline has failed at stage ${currentStage.name}. Build logs are attached."
        }
    }


}
