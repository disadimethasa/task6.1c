pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Simulating Maven build...'
                    def buildLog = 'Build succeeded. Compiled and packaged the application successfully.'
                    writeFile file: 'build-log.txt', text: buildLog
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo 'Simulating unit and integration tests...'
                    def testLog = 'Unit tests passed. Integration tests completed successfully.'
                    writeFile file: 'test-log.txt', text: testLog
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    echo 'Simulating code analysis...'
                    def analysisLog = 'Code analysis completed. No major issues found.'
                    writeFile file: 'analysis-log.txt', text: analysisLog
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    echo 'Simulating security scan...'
                    def scanLog = 'Security scan completed. No critical vulnerabilities detected.'
                    writeFile file: 'scan-log.txt', text: scanLog
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    echo 'Simulating deployment to staging...'
                    def deployStagingLog = 'Deployment to staging environment completed successfully.'
                    writeFile file: 'deploy-staging-log.txt', text: deployStagingLog
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo 'Simulating integration tests on staging environment...'
                    def integrationStagingLog = 'Integration tests on staging passed.'
                    writeFile file: 'integration-staging-log.txt', text: integrationStagingLog
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    echo 'Simulating deployment to production...'
                    def deployProductionLog = 'Deployment to production completed successfully.'
                    writeFile file: 'deploy-production-log.txt', text: deployProductionLog
                }
            }
        }
    }
  
    post {
        always {
            script {
                try {
                    // Archive all relevant log files
                    archiveArtifacts artifacts: 'build-log.txt, test-log.txt, analysis-log.txt, scan-log.txt, deploy-staging-log.txt, integration-staging-log.txt, deploy-production-log.txt', allowEmptyArchive: true
                    
                    // Send email with attachments
                    emailext(
                        to: 'disadimethasa@gmail.com',
                        subject: "Pipeline ${currentBuild.currentResult} - Build #${currentBuild.number}",
                        body: "The pipeline has completed with result: ${currentBuild.currentResult}. Please find the build logs attached.",
                        attachmentsPattern: 'build-log.txt, test-log.txt, analysis-log.txt, scan-log.txt, deploy-staging-log.txt, integration-staging-log.txt, deploy-production-log.txt'
                    )
                } catch (Exception e) {
                    echo "Error occurred while trying to capture and email build logs: ${e.message}"
                }
            }
        }
    }
}
