pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                script {
                    def buildLog = bat(script: 'mvn clean install', returnStdout: true).trim()
                    writeFile file: 'build-log.txt', text: buildLog
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    def testLog = bat(script: 'echo "Running unit tests with JavaUnit..."', returnStdout: true).trim()
                    writeFile file: 'test-log.txt', text: testLog
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    def analysisLog = bat(script: 'echo "Analyzing code quality with SonarQube..."', returnStdout: true).trim()
                    writeFile file: 'analysis-log.txt', text: analysisLog
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    def scanLog = bat(script: 'echo "Scanning for vulnerabilities with SAST scanner..."', returnStdout: true).trim()
                    writeFile file: 'scan-log.txt', text: scanLog
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    def deployLog = bat(script: 'echo "Deploying application to staging server using AWS..."', returnStdout: true).trim()
                    writeFile file: 'deploy-log.txt', text: deployLog
                }
            }
        }
    }
  
    post {
        always {
            script {
                try {
                    // Collect all log files
                    def logFiles = ['build-log.txt', 'test-log.txt', 'analysis-log.txt', 'scan-log.txt', 'deploy-log.txt']
                    logFiles.each { logFile ->
                        archiveArtifacts artifacts: logFile
                    }

                    // Send an email with the log files attached
                    emailext(
                        to: 'disadimethasa@gmail.com',
                        subject: "Pipeline ${currentBuild.currentResult} - Build #${currentBuild.number}",
                        body: "The pipeline has completed with result: ${currentBuild.currentResult}. Please find the build logs attached.",
                        attachmentsPattern: logFiles.join(', ')
                    )
                } catch (Exception e) {
                    echo "Error occurred while trying to capture and email build logs: ${e.message}"
                }
            }
        }
    }
}
