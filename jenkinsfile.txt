pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                echo 'Maven is building your code...' 
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running unit tests with JavaUnit...' 
                echo 'Running integration tests with Selenium...' 
            }
            post {
                always {
                    sendNotification('Unit and Integration Tests')
                }
            }
        }
        stage('Code Analysis') {
            steps {
                echo 'Analyzing code quality with SonarQube...' 
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Scanning for vulnerabilities with SAST scanner...'
            }
            post {
                always {
                    sendNotification('Security Scan')
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying application to staging server using AWS...'
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running integration tests on staging environment...'
            }
            post {
                always {
                    sendNotification('Integration Tests on Staging')
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'Deploying application to production server using AWS tools...'
            }
        }
    }
  
    post {
        success {
            mail to: "disadimethasa@gmail.com",
                 subject: "Pipeline Success - Build # ${currentBuild.number}",
                 body: "The pipeline has successfully completed all stages. Build logs are attached."
        }
        failure {
            mail to: "disadimethasa@gmail.com",
                 subject: "Pipeline Failure - Build # ${currentBuild.number}",
                 body: "The pipeline has failed. Please check the attached logs for more details."
        }
    }
}

// The sendNotification function is moved outside the pipeline block
def sendNotification(stageName) {
    def logFile = "${stageName}-log.txt"
    
    // Try to collect the actual logs or create a fallback
    try {
        sh "echo 'Logs for ${stageName} stage' > ${logFile}" // Collect actual logs from your stages here
    } catch (Exception e) {
        echo "Failed to collect logs for ${stageName}: ${e.message}"
        sh "echo 'Log collection failed for ${stageName} stage.' > ${logFile}"
    }
    
    // Archive the logs so they are accessible for email attachment
    archiveArtifacts artifacts: logFile, allowEmptyArchive: true

    // Send email with the archived logs as an attachment
    emailext(
        to: 'disadimethasa@gmail.com',
        subject: "${stageName} Stage - ${currentBuild.result} - Build # ${currentBuild.number}",
        body: "The ${stageName} stage has completed with status: ${currentBuild.result}. Please check the attached logs for more details.",
        attachmentsPattern: logFile,
        compressLog: true
    )
}
